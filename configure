#!/usr/bin/env python3

import argparse
import json
import subprocess
import sys

from datetime import datetime
from pathlib import Path

if sys.version_info < (3, 9):
    print('Please make sure to point python3 to Python >= 3.9!')
    sys.exit(1)

DATE_FORMAT = '%Y-%m-%d'

# Helpers

def current_date() -> str:
    return datetime.now().strftime(DATE_FORMAT)

def commit_date(root: Path) -> str:
    result = subprocess.run(
        ['git', 'show', '-s', '--format=%cd', f'--date=format:{DATE_FORMAT}', 'HEAD'],
        cwd=root,
        capture_output=True,
        check=True,
        encoding='utf8',
    )
    return result.stdout.strip()

def default_compiler_date(root: Path) -> str:
    if (root / '.git').exists():
        return commit_date(root)
    else:
        return current_date()

def default_install_date() -> str:
    return current_date()

def compiler_version(root: Path) -> str:
    with open(root / 'package.json', 'r') as f:
        package = json.loads(f.read())
        return package['version']

def base_version(root: Path) -> str:
    with open(root / 'lib-trunk' / 'VERSION', 'r') as f:
        return f.read().strip()

def install_cpm_dependencies(cpm: list[str], pkg_path: Path):
    subprocess.run([*cpm, 'install', '--noexec'], cwd=pkg_path, check=True)

def compile_cpm_executable(curry: list[str], pkg_path: Path, main_mod: str, dest_path: Path):
    dest_dir = dest_path.parent
    dest_dir.mkdir(parents=True, exist_ok=True)

    subprocess.run([
        *curry,
        ':set', 'v0',
        ':load', main_mod,
        ':cd', str(dest_dir),
        ':save', 'main',
        ':quit',
    ], cwd=pkg_path, check=True)

    saved_path = dest_dir / main_mod
    saved_path.rename(dest_path)

# Main

def main():
    parser = argparse.ArgumentParser(description='Configures and generates the build files for KiCS2.')
    parser.add_argument('--root', default=Path(__file__).parent, help='The path to the KiCS2 repository.')
    parser.add_argument('--curry', default='kics2', help='The Curry compiler to bootstrap with.')
    parser.add_argument('--compiler-date', default=None, help='The compiler date to configure the build with. By default this is the commit date of HEAD.')
    parser.add_argument('--install-date', default=None, help='The installation date to configure the build with.')

    args = parser.parse_args()
    root = args.root
    curry = [args.curry]
    cpm = [*curry, 'cypm']
    compiler_date = args.compiler_date or default_compiler_date(root)
    install_date = args.install_date or default_install_date()

    generator_main = 'KiCS2.BuildGenerator.Main'
    generator_dir = root / 'build-generator'
    generator_bindir = generator_dir / 'bin'
    generator_bin = generator_bindir / 'generate-build'

    print('==> Installing dependencies...')
    install_cpm_dependencies(cpm, root)

    print('==> Installing build generator dependencies...')
    install_cpm_dependencies(cpm, generator_dir)

    print('==> Compiling build generator...')
    compile_cpm_executable(curry, generator_dir, generator_main, generator_bin)

    print('==> Running build generator...')
    subprocess.run([
        generator_bin,
        '--version', compiler_version(root),
        '--base-version', base_version(root),
        '--build-version', '2',
        '--compiler-date', compiler_date,
        '--install-date', install_date,
    ], check=True)

if __name__ == '__main__':
    main()
